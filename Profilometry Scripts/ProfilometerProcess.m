
% Script for importing data from the following text file:
%
%    Z:\Other\Methods\MATLAB Methods\N. Seattle Profilometer 2D\16.138-01 A.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/08/23 14:33:52

%% Initialize variables.


close all;
clc;

RESULTS = {'Sample', 'Thickness (um)', 'Angle'};

files=dir('*.csv');  % Find all files of type xml
files={files.name};  % Just take the name info

for i=1:length(files)
    
    close all;
    figure('Position', [100, 100, 1200, 800]);
    
    filename=char(files(i))
    delimiter = ',';
    startRow = 24;
    
    %% Format string for each line of text:
    %   column1: double (%f)
    %	column2: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%f%f%*s%[^\n\r]';
    
    %% Open the text file.
    fileID = fopen(filename,'r','n','UTF-8');
    % Skip the BOM (Byte Order Mark).
    fseek(fileID, 3, 'bof');
    
    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);
    
    %% Close the text file.
    fclose(fileID);
    
    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.
    
    %% Allocate imported array to column variable names
    lat = dataArray{:, 1};
    depth = dataArray{:, 2};
    
    
    %% Clear temporary variables
    clearvars delimiter startRow formatSpec fileID dataArray ans;
    
    
    s=length(lat);
    flat=100;
    cut=50;
    
    d1 = diff(smooth(depth,301))./diff(lat);
    
    lTemp=[ones(s,1) lat];
    b=lTemp(s-flat:s,:)\depth(s-flat:s)
    
    
    flattened=lTemp*b;
    flattened=depth-flattened;
    zero=median(flattened(s-flat:s));
    flattened=flattened-zero;
    
    bEnd=lTemp(s-flat:s,:)\flattened(s-flat:s)
    ending=lTemp*bEnd;
    
    
    c=find(flattened<-50000,1,'last');
    bCut=lTemp(c-cut:c,:)\flattened(c-cut:c);
    cutLine=lTemp*bCut;
    
    eCut=find(abs(flattened(1:c)-cutLine(1:c))>50000,1,'last');
    
    
    hold on;
    plot(lat, depth, '--g')
    plot(lat, flattened, 'b','LineWidth',2)
    plot(lat(s-2.5*flat:s), ending(s-2.5*flat:s), '--k')
    plot(lat(c-2*cut:c+cut), cutLine(c-2*cut:c+cut), '--r')
    hold off;
    legend('Original', 'Angle Corrected', 'Surface', 'Cut Slope')
    xlabel('Lateral Distance (mm)')
    ylabel(strcat('Depth (',[char(197)],')'))
    title(filename(1:length(filename)-4))
    text(lat(c-0.5*cut),1.2*flattened(c-0.5*cut),char('Cut Slope:', strcat(num2str(bCut(2)/10000,4),' (µm/mm)'), strcat(num2str(180/pi*atan(bCut(2)/10^7),4),'°')),'VerticalAlignment','top');
    text(lat(eCut),flattened(eCut)+50000,char('Paint Depth:', strcat(num2str(abs(flattened(eCut)/10^4),4),' (µm)')),'HorizontalAlignment','center','VerticalAlignment','bottom');
    
    
    set(gca,'LooseInset',get(gca,'TightInset'))
    
    shg
    hgexport(gcf,strcat(filename(1:length(filename)-4),'.png'),hgexport('factorystyle'),'Format','png')
    
    set(gcf,'PaperOrientation','landscape');
    print(gcf, '-fillpage', '-dpdf', strcat(filename(1:length(filename)-4),'.pdf'))
    RESULTS = [RESULTS; {filename(1:length(filename)-4), abs(flattened(eCut)/10^4), 180/pi*atan(bCut(2)/10^7)}];
end